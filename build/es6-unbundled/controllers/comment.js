const express=require('express'),Comment=require('../models/comment'),router=express.Router();router.get('/count',(a,b)=>{Comment.count((a,c)=>b.json({success:!0,data:c}))}),router.get('/dummy',(a,b)=>b.json({success:!0,data:[]})),router.get('/read',(a,b)=>{Comment.find((a,c)=>a?b.json({success:!1,error:a}):b.json({success:!0,data:c})).limit(20)}),router.post('/add',(a,b)=>{const c=new Comment,{author:d,text:e}=a.body;return d&&e?void(c.author=d,c.text=e,c.save((a)=>a?b.json({success:!1,error:a}):b.json({success:!0}))):b.json({success:!1,error:'You must provide an author and comment'})}),router.put('/edit/:commentId',(a,b)=>{const{commentId:c}=a.params;return c?void Comment.findById(c,(c,d)=>{if(c)return b.json({success:!1,error:c});const{author:e,text:f}=a.body;e&&(d.author=e),f&&(d.text=f),d.save((a)=>a?b.json({success:!1,error:a}):b.json({success:!0}))}):b.json({success:!1,error:'No comment id provided'})}),router.delete('/delete/:commentId',(a,b)=>{const{commentId:c}=a.params;return c?void Comment.remove({_id:c},(a)=>a?b.json({success:!1,error:a}):b.json({success:!0})):b.json({success:!1,error:'No comment id provided'})}),module.exports=router;