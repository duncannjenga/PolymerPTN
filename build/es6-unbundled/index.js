const prpl=require('prpl-server'),express=require('express'),bodyParser=require('body-parser'),logger=require('morgan'),mongoose=require('mongoose'),cors=require('cors'),passport=require('passport'),app=express(),config=require('./config/database'),CommentController=require('./controllers/hotel'),UserController=require('./controllers/user'),AvailabilityController=require('./controllers/availability'),AllocationController=require('./controllers/allocation'),BlockingController=require('./controllers/blocking'),AgentController=require('./controllers/agent'),GroupController=require('./controllers/group'),BookingController=require('./controllers/booking'),API_PORT=process.env.PORT||8080;mongoose.connect(config.db,{replicaSet:'Cluster0-shard-0',auth:{authdb:'admin'},useNewUrlParser:!0}),mongoose.connection.on('connected',()=>{console.log('MongoDB connection established\nReady...')}),mongoose.connection.on('error',(a)=>{console.log('MongoDB connection error:'+a)}),app.use(bodyParser.urlencoded({extended:!0})),app.use(bodyParser.json()),app.use(logger('dev')),app.use(passport.initialize()),app.use(passport.session()),app.use(cors()),app.use('/availability',AvailabilityController),app.use('/allocation',AllocationController),app.use('/agent',AgentController),app.use('/blocking',BlockingController),app.use('/hotel',CommentController),app.use('/user',UserController),app.use('/group',GroupController),app.use('/booking',BookingController),app.get('/api/launch',(a,b)=>b.send('boom')),app.get('*',prpl.makeHandler('.',{builds:[{name:'/',browserCapabilities:['es2015','push']},{name:'fallback'}]})),app.listen(API_PORT,()=>console.log(`Listening on port ${API_PORT}`));